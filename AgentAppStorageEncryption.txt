using System;

namespace CryptProtectData_Test
{
    class Program
    {
        static void Main(string[] args)
        {
            if((args == null) || (args.Length != 1))
            {
                Console.WriteLine("Invalid arguments. Use: CryptProtectData -[encrypt|decrypt]");
                return;
            }

            AgentPasswordStore store = new AgentPasswordStore();

            switch(args[0])
            {
                case "-encrypt":
                    {
                        Console.WriteLine("Enter password:");
                        string plainTextPassword = Console.ReadLine();

                        store.StorePassword(plainTextPassword);
                        Console.WriteLine($"Encrypted password is saved");
                    }
                    break;

                case "-decrypt":
                    {
                        string plainTextPassword = store.RetrievePassword();
                        Console.WriteLine($"Password decrypted: {plainTextPassword}");
                    }
                    break;

                default:
                    Console.WriteLine("Invalid arguments. Use: CryptProtectData -[encrypt|decrypt]");
                    break;
            }
        }
    }
}

using System;
using System.Text;
using System.IO;
using System.Security.Cryptography;

namespace CryptProtectData_Test
{
    class AgentPasswordStore
    {
        private string FilePath
        {
            get
            {
                return Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location) + Path.DirectorySeparatorChar + "CryptProtectData.secret";
            }
        }

        public bool StorePassword(string plainTextPassword)
        {
            byte[] encryptedPassword = Protect(Encoding.UTF8.GetBytes(plainTextPassword));

            if (encryptedPassword != null)
            {
                File.WriteAllText(this.FilePath, Convert.ToBase64String(encryptedPassword));
                return true;
            }

            return false;
        }

        public string RetrievePassword()
        {
            if (File.Exists(this.FilePath))
            {
                byte[] encryptedPassword = Unprotect(Convert.FromBase64String(File.ReadAllText(this.FilePath)));
                return (encryptedPassword != null) ? Encoding.UTF8.GetString(encryptedPassword) : null;
             }
            else
            {
                return null;
            }
        }

        private byte[] Protect(byte[] data)
        {
            try
            {
                return ProtectedData.Protect(data, null, DataProtectionScope.CurrentUser);
            }
            catch (CryptographicException ex)
            {
                Console.WriteLine($"Data encryption failed. Reason: {ex.Message}");
                return null;
            }
        }

        private byte[] Unprotect(byte[] data)
        {
            try
            {
                return ProtectedData.Unprotect(data, null, DataProtectionScope.CurrentUser);
            }
            catch (CryptographicException ex)
            {
                Console.WriteLine($"Data decryption failed. Reason: {ex.Message}");
                return null;
            }
        }
    }
}